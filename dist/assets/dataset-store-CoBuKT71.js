const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/index-DlyXNM32.js","assets/index-G1_pch87.css"])))=>i.map(i=>d[i]);
import{d as w,_ as f}from"./index-DlyXNM32.js";import{p as m}from"./middleware-BFCXRDQO.js";const T="/api/v1";class S{baseUrl;constructor(e=T){this.baseUrl=e}getHeaders(){const e={"Content-Type":"application/json"},t=localStorage.getItem("auth_token");return t&&(e.Authorization=`Bearer ${t}`),e}async handleResponse(e){if(!e.ok){const t=await e.text();throw new Error(`API Error: ${e.status} - ${t}`)}return e.json()}sanitizeDatasetName(e){return e.replace(/\s+/g,"_").replace(/\./g,"").replace(/[^a-zA-Z0-9_-]/g,"_").replace(/_+/g,"_").replace(/^_|_$/g,"")}async getDatasets(){const e=await fetch(`${this.baseUrl}/datasets`,{method:"GET",headers:this.getHeaders()});return this.handleResponse(e)}async createDataset(e){const t={...e,name:this.sanitizeDatasetName(e.name)},a=await fetch(`${this.baseUrl}/datasets`,{method:"POST",headers:this.getHeaders(),body:JSON.stringify(t)});return this.handleResponse(a)}async deleteDataset(e){const t=await fetch(`${this.baseUrl}/datasets/${e}`,{method:"DELETE",headers:this.getHeaders()});if(!t.ok){const a=await t.text();throw new Error(`API Error: ${t.status} - ${a}`)}}async getDatasetData(e){const t=await fetch(`${this.baseUrl}/datasets/${e}/data`,{method:"GET",headers:this.getHeaders()});return this.handleResponse(t)}async deleteDatasetData(e,t){const a=await fetch(`${this.baseUrl}/datasets/${e}/data/${t}`,{method:"DELETE",headers:this.getHeaders()});if(!a.ok){const r=await a.text();throw new Error(`API Error: ${a.status} - ${r}`)}}async getRawData(e,t){const a=await fetch(`${this.baseUrl}/datasets/${e}/data/${t}/raw`,{method:"GET",headers:this.getHeaders()});if(!a.ok){const r=await a.text();throw new Error(`API Error: ${a.status} - ${r}`)}return a.text()}async getDatasetGraph(e){const t=await fetch(`${this.baseUrl}/datasets/${e}/graph`,{method:"GET",headers:this.getHeaders()});return this.handleResponse(t)}async getDatasetStatus(){const e=await fetch(`${this.baseUrl}/datasets/status`,{method:"GET",headers:this.getHeaders()});return this.handleResponse(e)}async addDataToDataset(e){const t=new FormData;if(e.data instanceof File?t.append("data",e.data):Array.isArray(e.data)?e.data.forEach(i=>{t.append("data",i)}):t.append("data",e.data),t.append("datasetId",e.datasetId),e.datasetName){const i=this.sanitizeDatasetName(e.datasetName);t.append("datasetName",i)}e.node_set&&e.node_set.length>0&&e.node_set.forEach(i=>{t.append("node_set",i)}),e.metadata&&t.append("metadata",JSON.stringify(e.metadata));const a={},r=localStorage.getItem("auth_token");r&&(a.Authorization=`Bearer ${r}`);const s=await fetch(`${this.baseUrl}/add`,{method:"POST",headers:a,body:t});return this.handleResponse(s)}async addFileToDataset(e,t,a){return this.addDataToDataset({data:t,datasetId:e,metadata:a})}async addTextToDataset(e,t,a){return this.addDataToDataset({data:t,datasetId:e,metadata:a})}async addUrlToDataset(e,t,a){return this.addDataToDataset({data:t,datasetId:e,metadata:a})}async addUrlsToDataset(e,t,a){return this.addDataToDataset({data:t,datasetId:e,metadata:a})}async cognifyDatasets(e){const t=await fetch(`${this.baseUrl}/cognify`,{method:"POST",headers:this.getHeaders(),body:JSON.stringify(e)});return this.handleResponse(t)}async getDatasetProcessingStatus(e){const t=new URLSearchParams;e.forEach(i=>t.append("dataset",i));const a=`${this.baseUrl}/datasets/status?${t.toString()}`,r=await fetch(a,{method:"GET",headers:this.getHeaders()});return await this.handleResponse(r)}async testApiConnection(){try{return(await fetch(`${this.baseUrl}/datasets`,{method:"GET",headers:this.getHeaders()})).ok}catch(e){return console.error("API connection test failed:",e),!1}}}const l=new S;function h(n){if(!n)return new Date;try{const e=new Date(n);return isNaN(e.getTime())?(console.warn("Invalid date string:",n),new Date):e}catch(e){return console.error("Date parsing error:",e,n),new Date}}function g(n){return{id:n.id,name:n.name,description:n.description,createdAt:h(n.created_at),updatedAt:h(n.updated_at),tags:n.tags||[],files:n.files?.map(e=>({id:e.id,name:e.name,type:e.mimeType,size:0,uploadDate:h(e.createdAt),content:void 0,extension:e.extension}))||[]}}function E(n){return{name:n.name,description:n.description,tags:n.tags||[]}}const _=w()(m((n,e)=>({datasets:[],currentDataset:null,isLoading:!1,error:null,statusPollingInterval:null,createDataset:async(t,a,r=[])=>{n({isLoading:!0,error:null});try{const s=E({name:t,description:a,tags:r}),i=await l.createDataset(s),o=g(i);n(c=>({datasets:[...c.datasets,o],isLoading:!1}))}catch(s){throw n({error:s instanceof Error?s.message:"Failed to create dataset",isLoading:!1}),s}},updateDataset:async(t,a)=>{n({isLoading:!0,error:null});try{n(r=>({datasets:r.datasets.map(s=>s.id===t?{...s,...a,updatedAt:new Date}:s),currentDataset:r.currentDataset?.id===t?{...r.currentDataset,...a,updatedAt:new Date}:r.currentDataset,isLoading:!1}))}catch(r){throw n({error:r instanceof Error?r.message:"Failed to update dataset",isLoading:!1}),r}},deleteDataset:async t=>{n({isLoading:!0,error:null});try{await l.deleteDataset(t),n(a=>({datasets:a.datasets.filter(r=>r.id!==t),currentDataset:a.currentDataset?.id===t?null:a.currentDataset,isLoading:!1}))}catch(a){throw n({error:a instanceof Error?a.message:"Failed to delete dataset",isLoading:!1}),a}},setCurrentDataset:t=>{const a=e().getDatasetById(t);n({currentDataset:a||null})},addFileToDataset:async(t,a)=>{n({isLoading:!0,error:null});try{const r={...a,id:crypto.randomUUID(),uploadDate:new Date};n(s=>({datasets:s.datasets.map(i=>i.id===t?{...i,files:[...i.files,r],updatedAt:new Date}:i),currentDataset:s.currentDataset?.id===t?{...s.currentDataset,files:[...s.currentDataset.files,r],updatedAt:new Date}:s.currentDataset,isLoading:!1}))}catch(r){throw n({error:r instanceof Error?r.message:"Failed to add file to dataset",isLoading:!1}),r}},uploadFileToDataset:async(t,a,r)=>{n({isLoading:!0,error:null});try{const i=(e().datasets.find(d=>d.id===t)||e().currentDataset)?.name,o=await l.addDataToDataset({data:a,datasetId:t,datasetName:i,metadata:r});if(o.status!=="PipelineRunCompleted")throw new Error(`Upload failed with status: ${o.status}`);const c=o.data_ingestion_info.map(d=>({id:d.data_id,name:a.name,type:a.type,size:a.size,uploadDate:new Date,extension:a.name.split(".").pop()||"unknown"}));n(d=>({datasets:d.datasets.map(u=>u.id===t?{...u,files:[...u.files,...c],updatedAt:new Date,processingStatus:"DATASET_PROCESSING_INITIATED"}:u),currentDataset:d.currentDataset?.id===t?{...d.currentDataset,files:[...d.currentDataset.files,...c],updatedAt:new Date,processingStatus:"DATASET_PROCESSING_INITIATED"}:d.currentDataset,isLoading:!1}))}catch(s){throw n({error:s instanceof Error?s.message:"Failed to upload file to dataset",isLoading:!1}),s}},addTextToDataset:async(t,a,r)=>{n({isLoading:!0,error:null});try{const i=(e().datasets.find(d=>d.id===t)||e().currentDataset)?.name,o=await l.addDataToDataset({data:a,datasetId:t,datasetName:i,metadata:r});if(o.status!=="PipelineRunCompleted")throw new Error(`Text upload failed with status: ${o.status}`);const c=o.data_ingestion_info.map(d=>({id:d.data_id,name:`Text Input - ${new Date().toLocaleString()}`,type:"text/plain",size:a.length,uploadDate:new Date,extension:"txt",dataType:"text",content:a}));n(d=>({datasets:d.datasets.map(u=>u.id===t?{...u,files:[...u.files,...c],updatedAt:new Date,processingStatus:"DATASET_PROCESSING_INITIATED"}:u),currentDataset:d.currentDataset?.id===t?{...d.currentDataset,files:[...d.currentDataset.files,...c],updatedAt:new Date,processingStatus:"DATASET_PROCESSING_INITIATED"}:d.currentDataset,isLoading:!1}))}catch(s){throw n({error:s instanceof Error?s.message:"Failed to add text to dataset",isLoading:!1}),s}},addUrlToDataset:async(t,a,r)=>{n({isLoading:!0,error:null});try{const i=(e().datasets.find(d=>d.id===t)||e().currentDataset)?.name,o=await l.addDataToDataset({data:a,datasetId:t,datasetName:i,metadata:r});if(o.status!=="PipelineRunCompleted")throw new Error(`URL upload failed with status: ${o.status}`);const c=o.data_ingestion_info.map(d=>({id:d.data_id,name:`URL - ${new URL(a).hostname}`,type:"text/uri-list",size:a.length,uploadDate:new Date,extension:"url",dataType:"url",content:a}));n(d=>({datasets:d.datasets.map(u=>u.id===t?{...u,files:[...u.files,...c],updatedAt:new Date,processingStatus:"DATASET_PROCESSING_INITIATED"}:u),currentDataset:d.currentDataset?.id===t?{...d.currentDataset,files:[...d.currentDataset.files,...c],updatedAt:new Date,processingStatus:"DATASET_PROCESSING_INITIATED"}:d.currentDataset,isLoading:!1}))}catch(s){throw n({error:s instanceof Error?s.message:"Failed to add URL to dataset",isLoading:!1}),s}},addUrlsToDataset:async(t,a,r)=>{n({isLoading:!0,error:null});try{const i=(e().datasets.find(d=>d.id===t)||e().currentDataset)?.name,o=await l.addDataToDataset({data:a,datasetId:t,datasetName:i,metadata:r});if(o.status!=="PipelineRunCompleted")throw new Error(`URLs upload failed with status: ${o.status}`);const c=o.data_ingestion_info.map((d,u)=>({id:d.data_id,name:`URL ${u+1} - ${new URL(a[u]||"").hostname}`,type:"text/uri-list",size:(a[u]||"").length,uploadDate:new Date,extension:"url",dataType:"url",content:a[u]}));n(d=>({datasets:d.datasets.map(u=>u.id===t?{...u,files:[...u.files,...c],updatedAt:new Date,processingStatus:"DATASET_PROCESSING_INITIATED"}:u),currentDataset:d.currentDataset?.id===t?{...d.currentDataset,files:[...d.currentDataset.files,...c],updatedAt:new Date,processingStatus:"DATASET_PROCESSING_INITIATED"}:d.currentDataset,isLoading:!1}))}catch(s){throw n({error:s instanceof Error?s.message:"Failed to add URLs to dataset",isLoading:!1}),s}},removeFileFromDataset:async(t,a)=>{n({isLoading:!0,error:null});try{await l.deleteDatasetData(t,a),n(r=>({datasets:r.datasets.map(s=>s.id===t?{...s,files:s.files.filter(i=>i.id!==a),updatedAt:new Date}:s),currentDataset:r.currentDataset?.id===t?{...r.currentDataset,files:r.currentDataset.files.filter(s=>s.id!==a),updatedAt:new Date}:r.currentDataset,isLoading:!1}))}catch(r){throw n({error:r instanceof Error?r.message:"Failed to remove file from dataset",isLoading:!1}),r}},updateFileInDataset:async(t,a,r)=>{n({isLoading:!0,error:null});try{n(s=>({datasets:s.datasets.map(i=>i.id===t?{...i,files:i.files.map(o=>o.id===a?{...o,...r}:o),updatedAt:new Date}:i),currentDataset:s.currentDataset?.id===t?{...s.currentDataset,files:s.currentDataset.files.map(i=>i.id===a?{...i,...r}:i),updatedAt:new Date}:s.currentDataset,isLoading:!1}))}catch(s){throw n({error:s instanceof Error?s.message:"Failed to update file in dataset",isLoading:!1}),s}},getDatasetById:t=>e().datasets.find(a=>a.id===t),searchDatasets:t=>{const a=t.toLowerCase();return e().datasets.filter(r=>r.name.toLowerCase().includes(a)||r.description.toLowerCase().includes(a)||r.tags.some(s=>s.toLowerCase().includes(a)))},fetchDatasets:async()=>{n({isLoading:!0,error:null});try{const a=(await l.getDatasets()).map(g);if(a.length>0){const r=a.map(s=>s.id);try{const s=await l.getDatasetProcessingStatus(r),i=a.map(o=>{const c=s[o.id];return c?{...o,processingStatus:c,updatedAt:new Date}:o});n({datasets:i,isLoading:!1}),e().startStatusPolling(),i.forEach(async o=>{try{await e().fetchDatasetData(o.id)}catch(c){console.error(`Failed to fetch data for dataset ${o.id}:`,c)}})}catch(s){console.error("Failed to fetch dataset statuses:",s),n({datasets:a,isLoading:!1})}}else n({datasets:a,isLoading:!1})}catch(t){throw n({error:t instanceof Error?t.message:"Failed to fetch datasets",isLoading:!1}),t}},fetchDatasetData:async t=>{n({isLoading:!0,error:null});try{const[a,r]=await Promise.all([l.getDatasetData(t),l.getDatasetProcessingStatus([t])]),s=a.map(o=>{let c;try{c=new Date(o.createdAt),isNaN(c.getTime())&&(console.warn("Invalid createdAt:",o.createdAt),c=new Date)}catch(d){console.error("Date parsing error:",d,o.createdAt),c=new Date}return{id:o.id,name:o.name,type:o.mimeType,size:0,uploadDate:c,content:void 0,extension:o.extension}}),i=r[t];n(o=>({datasets:o.datasets.map(c=>c.id===t?{...c,files:s,processingStatus:i||c.processingStatus,updatedAt:new Date}:c),currentDataset:o.currentDataset?.id===t?{...o.currentDataset,files:s,processingStatus:i||o.currentDataset.processingStatus,updatedAt:new Date}:o.currentDataset,isLoading:!1}))}catch(a){throw n({error:a instanceof Error?a.message:"Failed to fetch dataset data",isLoading:!1}),a}},processDatasets:async t=>{n({isLoading:!0,error:null});try{const a=await l.cognifyDatasets({datasetIds:t,runInBackground:!0});n(r=>({datasets:r.datasets.map(s=>{const i=a[s.id];return i?{...s,pipelineRunId:i.pipeline_run_id,updatedAt:new Date}:s}),currentDataset:r.currentDataset&&a[r.currentDataset.id]?{...r.currentDataset,pipelineRunId:a[r.currentDataset.id].pipeline_run_id,updatedAt:new Date}:r.currentDataset,isLoading:!1})),e().startStatusPolling()}catch(a){throw n({error:a instanceof Error?a.message:"Failed to process datasets",isLoading:!1}),a}},checkDatasetStatus:async t=>{try{const{datasets:a}=e(),r=a.find(c=>c.id===t),s=r?.processingStatus,o=(await l.getDatasetProcessingStatus([t]))[t];if(o){const c=s==="DATASET_PROCESSING_STARTED",d=o==="DATASET_PROCESSING_COMPLETED",u=o==="DATASET_PROCESSING_ERRORED";n(D=>({datasets:D.datasets.map(p=>p.id===t?{...p,processingStatus:o,updatedAt:new Date}:p),currentDataset:D.currentDataset?.id===t?{...D.currentDataset,processingStatus:o,updatedAt:new Date}:D.currentDataset})),c&&d?f(async()=>{const{toast:D}=await import("./index-DlyXNM32.js").then(p=>p.ab);return{toast:D}},__vite__mapDeps([0,1])).then(({toast:D})=>{D.success(`Dataset "${r?.name}" wurde erfolgreich verarbeitet!`)}):c&&u&&f(async()=>{const{toast:D}=await import("./index-DlyXNM32.js").then(p=>p.ab);return{toast:D}},__vite__mapDeps([0,1])).then(({toast:D})=>{D.error(`Verarbeitung von Dataset "${r?.name}" ist fehlgeschlagen!`)})}}catch(a){console.error("Failed to check dataset status:",a)}},getUnprocessedDatasets:()=>e().datasets.filter(t=>!t.processingStatus||t.processingStatus==="DATASET_PROCESSING_INITIATED"||t.processingStatus==="DATASET_PROCESSING_ERRORED"),checkAllDatasetStatuses:async()=>{try{const{datasets:t}=e();if(t.length===0)return;const a=t.map(s=>s.id),r=await l.getDatasetProcessingStatus(a);n(s=>({datasets:s.datasets.map(i=>{const o=r[i.id];return o?{...i,processingStatus:o,updatedAt:new Date}:i}),currentDataset:s.currentDataset&&r[s.currentDataset.id]?{...s.currentDataset,processingStatus:r[s.currentDataset.id],updatedAt:new Date}:s.currentDataset}))}catch(t){console.error("Failed to check all dataset statuses:",t)}},startStatusPolling:()=>{const{statusPollingInterval:t}=e();t&&clearInterval(t);const a=setInterval(()=>{e().checkAllDatasetStatuses()},5e3);n({statusPollingInterval:a})},stopStatusPolling:()=>{const{statusPollingInterval:t}=e();t&&(clearInterval(t),n({statusPollingInterval:null}))},clearError:()=>{n({error:null})}}),{name:"dataset-store",partialize:n=>({datasets:n.datasets.map(e=>({...e,processingStatus:void 0,pipelineRunId:void 0})),currentDataset:n.currentDataset?{...n.currentDataset,processingStatus:void 0,pipelineRunId:void 0}:null})}));export{_ as u};
